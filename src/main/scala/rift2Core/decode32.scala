package rift2Core



/*
* @Author: Ruige Lee
* @Date:   2021-03-19 10:40:09
* @Last Modified by:   Ruige Lee
* @Last Modified time: 2021-03-19 16:23:51
*/


/*
  Copyright (c) 2020 - 2021 Ruige Lee <wut.ruigeli@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/


import chisel3._
import chisel3.util._
import rift2Core.basicElement._

class decode32 extends Module {
	val io = IO ( new Bundle {
		val instr32 = Input(UInt(32.W))
		val info32 = Output(new Instruction_info)
	})



	

	val iType_imm = Wire(UInt(64.W))
	val sType_imm = Wire(UInt(64.W))
	val bType_imm = Wire(UInt(64.W))
	val uType_imm = Wire(UInt(64.W))
	val jType_imm = Wire(UInt(64.W))

	val is_noImm = Wire(Bool())
	val is_iType = Wire(Bool())
	val is_sType = Wire(Bool())
	val is_bType = Wire(Bool())
	val is_uType = Wire(Bool())
	val is_jType = Wire(Bool())


	iType_imm := Cat( Fill(52, io.instr32(31)), io.instr32(31,20))
	sType_imm := Cat( Seq(Fill(52, io.instr32(31)), io.instr32(31,25), io.instr32(11,7) ) )
	bType_imm := Cat( Seq(Fill(52, io.instr32(31)), io.instr32(7), io.instr32(30,25), io.instr32(11,8), 0.U(1.W)))
	uType_imm := Cat( Seq(Fill(32, io.instr32(31)), io.instr32(31,12), 0.U(12.W)))
	jType_imm := Cat( Seq(Fill(44, io.instr32(31)), io.instr32(19,12), io.instr32(20), io.instr32(30,21), 0.U(1.W)))


	is_noImm := ~is_iType & ~is_sType & ~is_bType & ~is_uType & ~is_jType

	is_iType := io.info32.jalr | io.info32.lb | io.info32.lh | io.info32.lw | io.info32.lbu | io.info32.lhu | io.info32.lwu | io.info32.ld | io.info32.addi | io.info32.addiw | io.info32.slti | io.info32.sltiu | io.info32.xori | io.info32.ori | io.info32.andi | io.info32.fence | io.info32.fence_i | io.info32.rw | io.info32.rs | io.info32.rc | io.info32.rwi | io.info32.rsi | io.info32.rci | io.info32.flw | io.info32.fld

	is_sType := io.info32.sb | io.info32.sh | io.info32.sw | io.info32.sd | io.info32.fsw | io.info32.fsd
	is_bType := io.info32.beq | io.info32.bne | io.info32.blt | io.info32.bge | io.info32.bltu | io.info32.bgeu;
	is_uType := io.info32.lui | io.info32.auipc;
	is_jType := io.info32.jal;




	io.info32.imm := Mux1H( Seq(
		is_noImm -> 0.U(64.W),
		is_iType -> iType_imm,
		is_sType -> sType_imm,
		is_bType -> bType_imm,
		is_uType -> uType_imm,
		is_jType -> jType_imm,
	))





	io.info32.rd0        := io.instr32(11,7)
	io.info32.rs1        := io.instr32(19,15)
	io.info32.rs2        := io.instr32(24,20)
	io.info32.shamt      := io.instr32(25,20)

	io.info32.lui         := ( io.instr32 === BitPat("b?????????????????????????0110111") )
	io.info32.auipc       := ( io.instr32 === BitPat("b?????????????????????????0010111") )
	io.info32.addi        := ( io.instr32 === BitPat("b?????????????????000?????0010011") )
	io.info32.addiw       := ( io.instr32 === BitPat("b?????????????????000?????0011011") )
	io.info32.slti        := ( io.instr32 === BitPat("b?????????????????010?????0010011") )
	io.info32.sltiu       := ( io.instr32 === BitPat("b?????????????????011?????0010011") )
	io.info32.xori        := ( io.instr32 === BitPat("b?????????????????100?????0010011") )
	io.info32.ori         := ( io.instr32 === BitPat("b?????????????????110?????0010011") )
	io.info32.andi        := ( io.instr32 === BitPat("b?????????????????111?????0010011") )
	io.info32.slli        := ( io.instr32 === BitPat("b000000???????????001?????0010011") )
	io.info32.slliw       := ( io.instr32 === BitPat("b0000000??????????001?????0011011") )
	io.info32.srli        := ( io.instr32 === BitPat("b000000???????????101?????0010011") )
	io.info32.srliw       := ( io.instr32 === BitPat("b0000000??????????101?????0011011") )
	io.info32.srai        := ( io.instr32 === BitPat("b010000???????????101?????0010011") )
	io.info32.sraiw       := ( io.instr32 === BitPat("b0100000??????????101?????0011011") )
	io.info32.add         := ( io.instr32 === BitPat("b0000000??????????000?????0110011") )
	io.info32.addw        := ( io.instr32 === BitPat("b0000000??????????000?????0111011") )
	io.info32.sub         := ( io.instr32 === BitPat("b0100000??????????000?????0110011") )
	io.info32.subw        := ( io.instr32 === BitPat("b0100000??????????000?????0111011") )
	io.info32.sll         := ( io.instr32 === BitPat("b0000000??????????001?????0110011") )
	io.info32.sllw        := ( io.instr32 === BitPat("b0000000??????????001?????0111011") )
	io.info32.slt         := ( io.instr32 === BitPat("b0000000??????????010?????0110011") )
	io.info32.sltu        := ( io.instr32 === BitPat("b0000000??????????011?????0110011") )
	io.info32.xor         := ( io.instr32 === BitPat("b0000000??????????100?????0110011") )
	io.info32.srl         := ( io.instr32 === BitPat("b0000000??????????101?????0110011") )
	io.info32.srlw        := ( io.instr32 === BitPat("b0000000??????????101?????0111011") )
	io.info32.sra         := ( io.instr32 === BitPat("b0100000??????????101?????0110011") )
	io.info32.sraw        := ( io.instr32 === BitPat("b0100000??????????101?????0111011") )
	io.info32.or          := ( io.instr32 === BitPat("b0000000??????????110?????0110011") )
	io.info32.and         := ( io.instr32 === BitPat("b0000000??????????111?????0110011") )

	io.info32.jal         := ( io.instr32 === BitPat("b?????????????????????????1101111") )
	io.info32.jalr        := ( io.instr32 === BitPat("b?????????????????000?????1100111") )
	io.info32.beq         := ( io.instr32 === BitPat("b?????????????????000?????1100011") )
	io.info32.bne         := ( io.instr32 === BitPat("b?????????????????001?????1100011") )
	io.info32.blt         := ( io.instr32 === BitPat("b?????????????????100?????1100011") )
	io.info32.bge         := ( io.instr32 === BitPat("b?????????????????101?????1100011") )
	io.info32.bltu        := ( io.instr32 === BitPat("b?????????????????110?????1100011") )
	io.info32.bgeu        := ( io.instr32 === BitPat("b?????????????????111?????1100011") )

	io.info32.lb          := ( io.instr32 === BitPat("b?????????????????000?????0000011") )
	io.info32.lh          := ( io.instr32 === BitPat("b?????????????????001?????0000011") )
	io.info32.lw          := ( io.instr32 === BitPat("b?????????????????010?????0000011") )
	io.info32.ld          := ( io.instr32 === BitPat("b?????????????????011?????0000011") )
	io.info32.lbu         := ( io.instr32 === BitPat("b?????????????????100?????0000011") )
	io.info32.lhu         := ( io.instr32 === BitPat("b?????????????????101?????0000011") )
	io.info32.lwu         := ( io.instr32 === BitPat("b?????????????????110?????0000011") )
	io.info32.sb          := ( io.instr32 === BitPat("b?????????????????000?????0100011") )
	io.info32.sh          := ( io.instr32 === BitPat("b?????????????????001?????0100011") )
	io.info32.sw          := ( io.instr32 === BitPat("b?????????????????010?????0100011") )
	io.info32.sd          := ( io.instr32 === BitPat("b?????????????????011?????0100011") )
	io.info32.fence       := ( io.instr32 === BitPat("b?????????????????000?????0001111") )
	io.info32.fence_i     := ( io.instr32 === BitPat("b?????????????????001?????0001111") )

	io.info32.rw          := ( io.instr32 === BitPat("b?????????????????001?????1110011") )
	io.info32.rs          := ( io.instr32 === BitPat("b?????????????????010?????1110011") )
	io.info32.rc          := ( io.instr32 === BitPat("b?????????????????011?????1110011") )
	io.info32.rwi         := ( io.instr32 === BitPat("b?????????????????101?????1110011") )
	io.info32.rsi         := ( io.instr32 === BitPat("b?????????????????110?????1110011") )
	io.info32.rci         := ( io.instr32 === BitPat("b?????????????????111?????1110011") )

	io.info32.mul         := ( io.instr32 === BitPat("b0000001??????????000?????0110011") )
	io.info32.mulh        := ( io.instr32 === BitPat("b0000001??????????001?????0110011") )
	io.info32.mulhsu      := ( io.instr32 === BitPat("b0000001??????????010?????0110011") )
	io.info32.mulhu       := ( io.instr32 === BitPat("b0000001??????????011?????0110011") )
	io.info32.div         := ( io.instr32 === BitPat("b0000001??????????100?????0110011") )
	io.info32.divu        := ( io.instr32 === BitPat("b0000001??????????101?????0110011") )
	io.info32.rem         := ( io.instr32 === BitPat("b0000001??????????110?????0110011") )
	io.info32.remu        := ( io.instr32 === BitPat("b0000001??????????111?????0110011") )
	io.info32.mulw        := ( io.instr32 === BitPat("b0000001??????????000?????0111011") )
	io.info32.divw        := ( io.instr32 === BitPat("b0000001??????????100?????0111011") )
	io.info32.divuw       := ( io.instr32 === BitPat("b0000001??????????101?????0111011") )
	io.info32.remw        := ( io.instr32 === BitPat("b0000001??????????110?????0111011") )
	io.info32.remuw       := ( io.instr32 === BitPat("b0000001??????????111?????0111011") )

	io.info32.ecall       := ( io.instr32 === BitPat("b00000000000000000000000001110011") )
	io.info32.ebreak      := ( io.instr32 === BitPat("b00000000000100000000000001110011") )
	io.info32.mret        := ( io.instr32 === BitPat("b00110000001000000000000001110011") )
	io.info32.uret        := ( io.instr32 === BitPat("b00000000001000000000000001110011") )
	io.info32.sret        := ( io.instr32 === BitPat("b00010000001000000000000001110011") )
	io.info32.dret        := ( io.instr32 === BitPat("b01111011001000000000000001110011") )

	io.info32.wfi         := ( io.instr32 === BitPat("b00010000010100000000000001110011") )

	io.info32.sfence_vma  := ( io.instr32 === BitPat("b0001001??????????000000001110011") )

	io.info32.hfence_vvma := ( io.instr32 === BitPat("b0010001??????????000000001110011") )
	io.info32.hfence_gvma := ( io.instr32 === BitPat("b0110001??????????000000001110011") )

	io.info32.hlv_b       := ( io.instr32 === BitPat("b0110000 00000 ????? 100 ????? 1110011") )
	io.info32.hlv_bu      := ( io.instr32 === BitPat("b0110000 00001 ????? 100 ????? 1110011") )
	io.info32.hlv_h       := ( io.instr32 === BitPat("b0110010 00000 ????? 100 ????? 1110011") )
	io.info32.hlv_hu      := ( io.instr32 === BitPat("b0110010 00001 ????? 100 ????? 1110011") )
	io.info32.hlvx_hu     := ( io.instr32 === BitPat("b0110010 00011 ????? 100 ????? 1110011") )
	io.info32.hlv_w       := ( io.instr32 === BitPat("b0110100 00000 ????? 100 ????? 1110011") )
	io.info32.hlvx_wu     := ( io.instr32 === BitPat("b0110100 00011 ????? 100 ????? 1110011") )
	io.info32.hsv_b       := ( io.instr32 === BitPat("b0110001 ????? ????? 100 00000 1110011") )
	io.info32.hsv_h       := ( io.instr32 === BitPat("b0110011 ????? ????? 100 00000 1110011") )
	io.info32.hsv_w       := ( io.instr32 === BitPat("b0110101 ????? ????? 100 00000 1110011") )
	io.info32.hlv_wu      := ( io.instr32 === BitPat("b0110100 00001 ????? 100 ????? 1110011") )
	io.info32.hlv_d       := ( io.instr32 === BitPat("b0110110 00000 ????? 100 ????? 1110011") )
	io.info32.hsv_d       := ( io.instr32 === BitPat("b0110111 ????? ????? 100 00000 1110011") )

	io.info32.lr_w        := ( io.instr32 === BitPat("b00010??00000?????010?????0101111") )
	io.info32.sc_w        := ( io.instr32 === BitPat("b00011????????????010?????0101111") )
	io.info32.amoswap_w   := ( io.instr32 === BitPat("b00001????????????010?????0101111") )
	io.info32.amoadd_w    := ( io.instr32 === BitPat("b00000????????????010?????0101111") )
	io.info32.amoxor_w    := ( io.instr32 === BitPat("b00100????????????010?????0101111") )
	io.info32.amoand_w    := ( io.instr32 === BitPat("b01100????????????010?????0101111") )
	io.info32.amoor_w     := ( io.instr32 === BitPat("b01000????????????010?????0101111") )
	io.info32.amomin_w    := ( io.instr32 === BitPat("b10000????????????010?????0101111") )
	io.info32.amomax_w    := ( io.instr32 === BitPat("b10100????????????010?????0101111") )
	io.info32.amominu_w   := ( io.instr32 === BitPat("b11000????????????010?????0101111") )
	io.info32.amomaxu_w   := ( io.instr32 === BitPat("b11100????????????010?????0101111") )
	io.info32.lr_d        := ( io.instr32 === BitPat("b00010??00000?????011?????0101111") )
	io.info32.sc_d        := ( io.instr32 === BitPat("b00011????????????011?????0101111") )
	io.info32.amoswap_d   := ( io.instr32 === BitPat("b00001????????????011?????0101111") )
	io.info32.amoadd_d    := ( io.instr32 === BitPat("b00000????????????011?????0101111") )
	io.info32.amoxor_d    := ( io.instr32 === BitPat("b00100????????????011?????0101111") )
	io.info32.amoand_d    := ( io.instr32 === BitPat("b01100????????????011?????0101111") )
	io.info32.amoor_d     := ( io.instr32 === BitPat("b01000????????????011?????0101111") )
	io.info32.amomin_d    := ( io.instr32 === BitPat("b10000????????????011?????0101111") )
	io.info32.amomax_d    := ( io.instr32 === BitPat("b10100????????????011?????0101111") )
	io.info32.amominu_d   := ( io.instr32 === BitPat("b11000????????????011?????0101111") )
	io.info32.amomaxu_d   := ( io.instr32 === BitPat("b11100????????????011?????0101111") )


	io.info32.flw         := ( io.instr32 === BitPat("b?????????????????010?????0000111") )
	io.info32.fsw         := ( io.instr32 === BitPat("b?????????????????010?????0100111") )
	io.info32.fmadd_s     := ( io.instr32 === BitPat("b?????00??????????????????1000011") )
	io.info32.fmsub_s     := ( io.instr32 === BitPat("b?????00??????????????????1000111") )
	io.info32.fnmsub_s    := ( io.instr32 === BitPat("b?????00??????????????????1001011") )
	io.info32.fnmadd_s    := ( io.instr32 === BitPat("b?????00??????????????????1001111") )
	io.info32.fadd_s      := ( io.instr32 === BitPat("b0000000??????????????????1010011") )
	io.info32.fsub_s      := ( io.instr32 === BitPat("b0000100??????????????????1010011") )
	io.info32.fmul_s      := ( io.instr32 === BitPat("b0001000??????????????????1010011") )
	io.info32.fdiv_s      := ( io.instr32 === BitPat("b0001100??????????????????1010011") )
	io.info32.fsqrt_s     := ( io.instr32 === BitPat("b010110000000?????????????1010011") )
	io.info32.fsgnj_s     := ( io.instr32 === BitPat("b0010000??????????000?????1010011") )
	io.info32.fsgnjn_s    := ( io.instr32 === BitPat("b0010000??????????001?????1010011") )
	io.info32.fsgnjx_s    := ( io.instr32 === BitPat("b0010000??????????010?????1010011") )
	io.info32.fmin_s      := ( io.instr32 === BitPat("b0010100??????????000?????1010011") )
	io.info32.fmax_s      := ( io.instr32 === BitPat("b0010100??????????001?????1010011") )
	io.info32.fcvt_w_s    := ( io.instr32 === BitPat("b110000000000?????????????1010011") )
	io.info32.fcvt_wu_s   := ( io.instr32 === BitPat("b110000100001?????????????1010011") )
	io.info32.fmv_x_w     := ( io.instr32 === BitPat("b111000000000?????000?????1010011") )
	io.info32.feq_s       := ( io.instr32 === BitPat("b1010000??????????010?????1010011") )
	io.info32.flt_s       := ( io.instr32 === BitPat("b1010000??????????001?????1010011") )
	io.info32.fle_s       := ( io.instr32 === BitPat("b1010000??????????000?????1010011") )
	io.info32.fclass_s    := ( io.instr32 === BitPat("b111000000000?????001?????1010011") )
	io.info32.fcvt_s_w    := ( io.instr32 === BitPat("b110100000000?????????????1010011") )
	io.info32.fcvt_s_wu   := ( io.instr32 === BitPat("b110100000001?????????????1010011") )
	io.info32.fmv_w_x     := ( io.instr32 === BitPat("b111100000000?????000?????1010011") )
	io.info32.fcvt_l_s    := ( io.instr32 === BitPat("b110000000010?????????????1010011") )
	io.info32.fcvt_lu_s   := ( io.instr32 === BitPat("b110000000011?????????????1010011") )
	io.info32.fcvt_s_l    := ( io.instr32 === BitPat("b110100000010?????????????1010011") )
	io.info32.fcvt_s_lu   := ( io.instr32 === BitPat("b110100000011?????????????1010011") )


	io.info32.fld         := ( io.instr32 === BitPat("b?????????????????011?????0000111") )
	io.info32.fsd         := ( io.instr32 === BitPat("b?????????????????011?????0100111") )
	io.info32.fmadd_d     := ( io.instr32 === BitPat("b?????01??????????????????1000011") )
	io.info32.fmsub_d     := ( io.instr32 === BitPat("b?????01??????????????????1000111") )
	io.info32.fnmsub_d    := ( io.instr32 === BitPat("b?????01??????????????????1001011") )
	io.info32.fnmadd_d    := ( io.instr32 === BitPat("b?????01??????????????????1001111") )
	io.info32.fadd_d      := ( io.instr32 === BitPat("b0000001??????????????????1010011") )
	io.info32.fsub_d      := ( io.instr32 === BitPat("b0000101??????????????????1010011") )
	io.info32.fmul_d      := ( io.instr32 === BitPat("b0001001??????????????????1010011") )
	io.info32.fdiv_d      := ( io.instr32 === BitPat("b0001101??????????????????1010011") )
	io.info32.fsqrt_d     := ( io.instr32 === BitPat("b010110100000?????????????1010011") )
	io.info32.fsgnj_d     := ( io.instr32 === BitPat("b0010001??????????000?????1010011") )
	io.info32.fsgnjn_d    := ( io.instr32 === BitPat("b0010001??????????001?????1010011") )
	io.info32.fsgnjx_d    := ( io.instr32 === BitPat("b0010001??????????010?????1010011") )
	io.info32.fmin_d      := ( io.instr32 === BitPat("b0010101??????????000?????1010011") )
	io.info32.fmax_d      := ( io.instr32 === BitPat("b0010101??????????001?????1010011") )
	io.info32.fcvt_s_d    := ( io.instr32 === BitPat("b010000000001?????????????1010011") )
	io.info32.fcvt_d_s    := ( io.instr32 === BitPat("b010000100000?????????????1010011") )
	io.info32.feq_d       := ( io.instr32 === BitPat("b1010001??????????010?????1010011") )
	io.info32.flt_d       := ( io.instr32 === BitPat("b1010001??????????001?????1010011") )
	io.info32.fle_d       := ( io.instr32 === BitPat("b1010001??????????000?????1010011") )
	io.info32.fclass_d    := ( io.instr32 === BitPat("b111000100000?????001?????1010011") )
	io.info32.fcvt_w_d    := ( io.instr32 === BitPat("b110000100000?????????????1010011") )
	io.info32.fcvt_wu_d   := ( io.instr32 === BitPat("b110000100001?????????????1010011") )
	io.info32.fcvt_d_w    := ( io.instr32 === BitPat("b110100100000?????????????1010011") )
	io.info32.fcvt_d_wu   := ( io.instr32 === BitPat("b110100100001?????????????1010011") )
	io.info32.fcvt_l_d    := ( io.instr32 === BitPat("b110000100010?????????????1010011") )
	io.info32.fcvt_lu_d   := ( io.instr32 === BitPat("b110000100011?????????????1010011") )
	io.info32.fmv_x_d     := ( io.instr32 === BitPat("b111000100000?????000?????1010011") )
	io.info32.fcvt_d_l    := ( io.instr32 === BitPat("b110100100010?????????????1010011") )
	io.info32.fcvt_d_lu   := ( io.instr32 === BitPat("b110100100011?????????????1010011") )
	io.info32.fmv_d_x     := ( io.instr32 === BitPat("b111100100000?????000?????1010011") )
}




